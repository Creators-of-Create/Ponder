plugins {
    id "idea"
    id "eclipse"
    id "net.neoforged.moddev" version "${mdg_version}"
}

base {
    archivesName = "Ponder-NeoForge-${minecraft_version}"
}

def commonProject = findProject(":Common") != null ? project(":Common") : project(":ponder:Common")

boolean inMultiModWorkspace = rootProject.hasProperty("multiModWorkspace.enabled")
project.logger.lifecycle("MultiModWorkspace ${inMultiModWorkspace ? "enabled" : "disabled"} for project ${mod_id}:${project.name}.")

println "Java: ${System.getProperty "java.version"}, JVM: ${System.getProperty "java.vm.version"} (${System.getProperty "java.vendor"}), Arch: ${System.getProperty "os.arch"}"

neoForge {
    version = neo_version

    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_version
    }

    runs {
        configureEach {
            gameDirectory = project.file("run")

            // fixme
//            if (inMultiModWorkspace)
//                ideaModule "createmod.ponder.NeoForge.main"
//            else
//                ideaModule "ponder.NeoForge.main"

            systemProperty "forge.logging.console.level", "debug"
            jvmArguments = ["-XX:+AllowEnhancedClassRedefinition", "-XX:+IgnoreUnrecognizedVMOptions"]
            //jvmArgs "-XX:+UnlockCommercialFeatures" // uncomment for profiling

            systemProperty "mixin.env.remapRefMap", "true"
            systemProperty "mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg"
        }

        client {
            client()
        }

        server {
            server()
            programArgument '--nogui'
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir "src/generated/resources" }

dependencies {
    compileOnly(commonProject)

    compileOnly("dev.engine_room.flywheel:flywheel-neoforge-api-${minecraft_version}:${flywheel_version}")
    runtimeOnly("dev.engine_room.flywheel:flywheel-neoforge-${minecraft_version}:${flywheel_version}")
}

tasks.withType(JavaCompile).configureEach {
    source(commonProject.sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(commonProject.sourceSets.main.allJava)
}

tasks.named("compileTestJava") {
    it.enabled = false
}

tasks.named("sourcesJar", Jar) {
    from(commonProject.sourceSets.main.allSource)
}

processResources {
    from commonProject.sourceSets.main.resources
}

// -- MAVEN PUBLISHING --
project.publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }

    repositories {
        maven {
            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty("mavenUsername") && project.hasProperty("mavenPassword")) {

                credentials {

                    username findProperty("mavenUsername")
                    password findProperty("mavenPassword")
                }
            }

            url getDefaultString("mavenURL", "undefined", true)
        }
    }
}
