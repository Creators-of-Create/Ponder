plugins {
    id 'idea'
    id 'eclipse'
    id 'net.minecraftforge.gradle' version '[6.0, 6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'org.parchmentmc.librarian.forgegradle' version "${librarian_version}"
}

base {
    archivesName = "Ponder-Forge-${minecraft_version}"
}

def commonProject = findProject(":Common") != null ? project(":Common") : project(":ponder:Common")

boolean inMultiModWorkspace = rootProject.hasProperty('multiModWorkspace.enabled')
boolean catnipInWorkspace = rootProject.hasProperty('multiModWorkspace.catnip')
project.logger.lifecycle("MultiModWorkspace ${inMultiModWorkspace ? 'enabled' : 'disabled'} for project ${mod_id}:${project.name}.")
project.logger.lifecycle("Dependencies included in Workspace: [Catnip: ${catnipInWorkspace}]")

// -- Mixin Support
if (project.ext.mixin_enabled) {
    mixin {
        // Tells the mixin plugin where to put the generated refmap file.
        add sourceSets.main, "${mod_id}.refmap.json"

        config "${mod_id}.mixins.json"
    }
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {

    if (Boolean.parseBoolean(project.use_parchment)) {
        mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    } else {
        mappings channel: 'official', version: "${minecraft_version}"
    }

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    copyIdeResources = true

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            if (inMultiModWorkspace)
                ideaModule 'createmod.ponder.Forge.main'
            else
                ideaModule 'ponder.Forge.main'

            property 'forge.logging.console.level', 'debug'
            jvmArgs '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowEnhancedClassRedefinition' // uncomment with jbr
            //jvmArgs '-XX:+UnlockCommercialFeatures' // uncomment for profiling

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.ext.mixin_enabled) {
                arg "-mixin.config=${mod_id}.mixins.json"
            }

            arg '-mixin.config=catnip.mixins.json'

            mods {
                ponder {
                    source sourceSets.main
                    source commonProject.sourceSets.main
                }

                if (catnipInWorkspace) {
                    catnip {
                        source project(":catnip:Common").sourceSets.main
                        source project(":catnip:Forge").sourceSets.main
                    }
                }
            }
        }


        client {
            taskName 'Client'

            arg '-mixin.config=flywheel.backend.mixins.json'
            arg '-mixin.config=flywheel.impl.mixins.json'
            arg '-mixin.config=flywheel.impl.sodium.mixins.json'
        }

        server {
            taskName 'Server'
        }
    }
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly commonProject

    if (catnipInWorkspace) {
        implementation project(":catnip:Common")
        implementation project(":catnip:Forge")
    } else {
        implementation fg.deobf("net.createmod.catnip:Catnip-Forge-${minecraft_version}:${catnip_version}")
    }

    compileOnly fg.deobf("dev.engine_room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}")
    runtimeOnly fg.deobf("dev.engine_room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")

    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
}

tasks.withType(JavaCompile).configureEach {
    source(commonProject.sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(commonProject.sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(commonProject.sourceSets.main.allSource)
}

processResources {
    from commonProject.sourceSets.main.resources

    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at build time.
    buildProps.put('file', [jarVersion: project.version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }
}

jar.finalizedBy('reobfJar')

// -- MAVEN PUBLISHING --
project.publishing {

    publications {

        mavenJava(MavenPublication) {

            artifactId base.archivesName.get()
            from components.java
            fg.component(it)
        }
    }

    repositories {

        maven {

            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {

                credentials {

                    username findProperty('mavenUsername')
                    password findProperty('mavenPassword')
                }
            }

            url getDefaultString('mavenURL', 'undefined', true)
        }
    }
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}
