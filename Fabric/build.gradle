plugins {
    id "fabric-loom" version "${loom_version}"
}

base {
    archivesName = "Ponder-Fabric-${minecraft_version}"
    group = "net.createmod.ponder"
}

def commonProject = findProject(":Common") != null ? project(":Common") : project(":${project_id}:Common")

boolean inMultiModWorkspace = rootProject.hasProperty("multiModWorkspace.enabled")
project.logger.lifecycle("MultiModWorkspace ${inMultiModWorkspace ? "enabled" : "disabled"} for project ${mod_id}:${project.name}.")

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    for (String module in port_lib_modules.split(",")) {
        modApi "io.github.fabricators_of_create.Porting-Lib:$module:$port_lib_version"
    }

    modApi "dev.engine-room.flywheel:flywheel-fabric-api-${minecraft_version}:${flywheel_version}"
    modImplementation "dev.engine-room.flywheel:flywheel-fabric-${minecraft_version}:${flywheel_version}"

    //implementation("com.electronwill.night-config:core:3.6.3")
    //implementation("com.electronwill.night-config:toml:3.6.3")
    modApi("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forgeconfigapiport_version}") //source: https://github.com/Fuzss/forgeconfigapiport-fabric

    //source: https://github.com/Fuzss/forgeconfigapiport-fabric
    implementation(include("javax.annotation:javax.annotation-api:1.3.2"))
    implementation(include("com.google.code.findbugs:jsr305:3.0.2"))

    implementation(commonProject)
}

loom {
    runs {
        client {
            client()
            setConfigName("Ponder Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Ponder Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }

    accessWidenerPath = file("src/main/resources/fabric_ponder.accesswidener")
}

tasks.withType(JavaCompile).configureEach {
    source(commonProject.sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(commonProject.sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(commonProject.sourceSets.main.allSource)
}

processResources {
    from commonProject.sourceSets.main.resources
}

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    dev jar
}

// -- MAVEN PUBLISHING --
project.publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty("mavenUsername") && project.hasProperty("mavenPassword")) {

                credentials {

                    username findProperty("mavenUsername")
                    password findProperty("mavenPassword")
                }
            }

            url getDefaultString("mavenURL", "undefined", true)
        }
    }
}
