plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

base {
    archivesName = "Ponder-Fabric-${minecraft_version}"
    group = 'net.createmod.ponder'
}

def commonPath = findProject(":Common") != null ? ":Common" : ":${project_id}:Common"
def commonProject = project(commonPath)

boolean inMultiModWorkspace = rootProject.hasProperty('multiModWorkspace.enabled')
boolean flywheelInWorkspace = rootProject.hasProperty('multiModWorkspace.flywheel')
boolean catnipInWorkspace = rootProject.hasProperty('multiModWorkspace.catnip')
project.logger.lifecycle("MultiModWorkspace ${inMultiModWorkspace ? 'enabled' : 'disabled'} for project ${mod_id}:${project.name}.")
project.logger.lifecycle("Dependencies included in Workspace: [Flywheel: ${flywheelInWorkspace}], [Catnip: ${catnipInWorkspace}]")

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = commonProject.loom.accessWidenerPath

    mods {
        main { // to match the default mod generated for Forge
            sourceSet project.sourceSets.main
            sourceSet commonProject.sourceSets.main
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    // The following line declares the mojmap mappings, you may use other mappings as well
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    common(project(path: commonPath, configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: commonPath, configuration: "transformProductionFabric")) { transitive false }

    for (String module in port_lib_modules.split(",")) {
        modApi "io.github.fabricators_of_create.Porting-Lib:$module:$port_lib_version+$minecraft_version"
    }

    if (catnipInWorkspace) {
        implementation project(path: ':catnip:Common')
        implementation project(path: ':catnip:Fabric', configuration: 'dev')
    } else {
        modImplementation "net.createmod.catnip:Catnip-Fabric-${minecraft_version}:${catnip_version}"
    }

    modApi "com.jozufozu.flywheel:flywheel-fabric-$minecraft_version:$flywheel_version"

    implementation 'com.electronwill.night-config:core:3.6.3'
    implementation 'com.electronwill.night-config:toml:3.6.3'
    modImplementation "net.minecraftforge:forgeconfigapiport-fabric:4.2.11" //source: https://github.com/Fuzss/forgeconfigapiport-fabric
    implementation(include("javax.annotation:javax.annotation-api:1.3.2"))
    implementation(include("com.google.code.findbugs:jsr305:3.0.2"))
    //modImplementation "com.terraformersmc:modmenu:4.1.2"
}

processResources {

    //from commonProject.sourceSets.main.resources

    def buildProps = project.properties.clone()

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {

        expand buildProps
    }
}

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    dev jar
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = commonProject.sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

// -- MAVEN PUBLISHING --
project.publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {
                credentials {
                    username findProperty('mavenUsername')
                    password findProperty('mavenPassword')
                }
            }

            url getDefaultString('mavenURL', 'undefined', true)
        }
        //mavenLocal()
    }
}
