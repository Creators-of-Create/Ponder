plugins {
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT'
}

apply from: '../gradle/property_helper.gradle'

archivesBaseName = "${mod_name}-Common-${minecraft_version}"

boolean catnipInWorkspace = rootProject.hasProperty('multiModWorkspace.catnip')
//boolean catnipInWorkspace = findProject(":catnip") != null

minecraft {
    version(minecraft_version)
    accessWideners 'src/main/resources/ponder.accesswidener'
}

dependencies {
    compileOnly group: 'org.spongepowered', name: 'mixin', version: '0.8.4'

    implementation 'com.electronwill.night-config:core:3.6.5'
    implementation 'com.electronwill.night-config:toml:3.6.5'
    compileOnly 'net.minecraftforge:forgeconfigapiport-fabric:3.2.3' //source: https://github.com/Fuzss/forgeconfigapiport-fabric

    if (catnipInWorkspace) {
        compileOnly project(":catnip:Common")
    } else {
        compileOnly "net.createmod.catnip:Catnip-Common-${minecraft_version}:${catnip_version}"
    }

}

processResources {

    def buildProps = project.properties.clone()

    filesMatching(['pack.mcmeta']) {

        expand buildProps
    }
}

// -- MAVEN PUBLISHING --
project.publishing {
    
    publications {

        mavenJava(MavenPublication) {
        
            artifactId project.archivesBaseName

            // Base mod archive.
            artifact jar
            
            // Adds the sources as an artifact.
            artifact project.sourcesJar {
                classifier 'sources'
            }

            // Adds the javadocs as an artifact.
            artifact project.javadocJar {
                classifier 'javadoc'
            }
        }
    }

    repositories {
    
        maven {
        
            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {
            
                credentials {
                
                    username findProperty('mavenUsername')
                    password findProperty('mavenPassword')
                }
            }

            url getDefaultString('mavenURL', 'undefined', true)
        }
    }
}