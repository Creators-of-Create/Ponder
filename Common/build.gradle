architectury {
    common(enabled_platforms.split(","))
}

base {
    archivesName = "Ponder-Common-${minecraft_version}"
    group = 'net.createmod.ponder'
}

loom {
    accessWidenerPath = file('src/main/resources/ponder.accesswidener')
}

boolean catnipInWorkspace = rootProject.hasProperty('multiModWorkspace.catnip')
boolean flywheelInWorkspace = rootProject.hasProperty('multiModWorkspace.flywheel')

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    // The following line declares the mojmap mappings, you may use other mappings as well
    mappings loom.officialMojangMappings()
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    if (catnipInWorkspace) {
        implementation(project(path: ":catnip:Common", configuration: "namedElements"))
    } else {
        modCompileOnly "net.createmod.catnip:Catnip-Common-${minecraft_version}:${catnip_version}"
    }

    if (flywheelInWorkspace) {
        compileOnly project(':Flywheel')
    } else {
        modCompileOnly "com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}"
    }

    implementation 'com.electronwill.night-config:core:3.6.5'
    implementation 'com.electronwill.night-config:toml:3.6.5'
    compileOnly 'net.minecraftforge:forgeconfigapiport-fabric:3.2.3' //source: https://github.com/Fuzss/forgeconfigapiport-fabric

    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
}

processResources {
    def buildProps = project.properties.clone()

    filesMatching(['pack.mcmeta']) {
        expand buildProps
    }
}

afterEvaluate {
    configurations.default.extendsFrom = [configurations.namedElements]
}

// -- MAVEN PUBLISHING --
project.publishing {

    publications {

        mavenJava(MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {
                credentials {
                    username findProperty('mavenUsername')
                    password findProperty('mavenPassword')
                }
            }

            url getDefaultString('mavenURL', 'undefined', true)
        }
        //mavenLocal()
    }
}

// I don't know what's trying to run this but if it doesn't exist, gradle detonates
tasks.register("prepareWorkspace"){}
