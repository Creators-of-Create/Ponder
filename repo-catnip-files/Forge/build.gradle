plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

base {
    archivesName = "Catnip-Forge-${minecraft_version}"
    group = 'net.createmod.catnip'
}

def commonPath = findProject(":Common") != null ? ":Common" : ":${project_id}:Common"
def commonProject = project(commonPath)

boolean inMultiModWorkspace = rootProject.hasProperty('multiModWorkspace.enabled')
boolean flywheelInWorkspace = rootProject.hasProperty('multiModWorkspace.flywheel')
project.logger.lifecycle("MultiModWorkspace ${inMultiModWorkspace ? 'enabled' : 'disabled'} for project ${mod_id}:${project.name}.")
project.logger.lifecycle("Dependencies included in Workspace: [Flywheel: ${flywheelInWorkspace}]")

project.logger.lifecycle "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = commonProject.loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        //mixinConfig "catnip-common.mixins.json"
        mixinConfig "catnip.mixins.json"
    }

    mods {
        main { // to match the default mod generated for Forge
            sourceSet project.sourceSets.main
            sourceSet commonProject.sourceSets.main
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

/*
minecraft {

    if (Boolean.parseBoolean(project.use_parchment)) {
        mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    } else {
        mappings channel: 'official', version: "${minecraft_version}"
    }

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    copyIdeResources = true

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            if (inMultiModWorkspace)
                ideaModule 'createmod.catnip.Forge.main'
            else
                ideaModule 'catnip.Forge.main'

            property 'forge.logging.console.level', 'debug'
            jvmArgs '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowEnhancedClassRedefinition' // uncomment with jbr
            //jvmArgs '-XX:+UnlockCommercialFeatures' // uncomment for profiling

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.ext.mixin_enabled) {
                arg "-mixin.config=${mod_id}.mixins.json"
            }

            mods {
                catnip {
                    source sourceSets.main
                    source commonProject.sourceSets.main
                }
            }
        }

        client {
            taskName 'Client'

            arg '-mixin.config=flywheel.mixins.json'

            mods {
                if (flywheelInWorkspace) {
                    flywheel {
                        source project(':Flywheel').sourceSets.main
                    }
                }
            }
        }

        server {
            taskName 'Server'
        }
    }
}*/

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    // The following line declares the mojmap mappings, you may use other mappings as well
    mappings loom.officialMojangMappings()

    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    common(project(path: commonPath, configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: commonPath, configuration: "transformProductionForge")) { transitive false }

    if (flywheelInWorkspace) {
        implementation project(':Flywheel')
    } else {
        modImplementation("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    }
}

processResources {
    //from commonProject.sourceSets.main.resources

    def buildProps = project.properties.clone()

    // Replaces FML's magic file.jarVersion string with the correct version at build time.
    buildProps.put('file', [jarVersion: project.version])

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand buildProps
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = commonProject.sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

// -- MAVEN PUBLISHING --
project.publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId base.archivesName.get()
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {
                credentials {
                    username findProperty('mavenUsername')
                    password findProperty('mavenPassword')
                }
            }

            url getDefaultString('mavenURL', 'undefined', true)
        }
        //mavenLocal()
    }
}
