plugins {
    id 'fabric-loom' version '1.2.+'
    id 'idea'
}

archivesBaseName = "${mod_name}-Fabric-${minecraft_version}"

def commonProject = findProject(":Common") != null ? project(":Common") : project(":${project_id}:Common")

boolean inMultiModWorkspace = rootProject.hasProperty('multiModWorkspace.enabled')
boolean flywheelInWorkspace = rootProject.hasProperty('multiModWorkspace.flywheel')
project.logger.lifecycle("MultiModWorkspace ${inMultiModWorkspace ? 'enabled' : 'disabled'} for project ${mod_id}:${project.name}.")
project.logger.lifecycle("Dependencies included in Workspace: [Flywheel: ${flywheelInWorkspace}]")

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    for (String module in port_lib_modules.split(",")) {
        modApi "io.github.fabricators_of_create.Porting-Lib:$module:$port_lib_version+$minecraft_version"
    }
    //modImplementation include("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.minecraft_version}-stable")

    modApi "com.jozufozu.flywheel:flywheel-fabric-$minecraft_version:$flywheel_version"

    implementation 'com.electronwill.night-config:core:3.6.3'
    implementation 'com.electronwill.night-config:toml:3.6.3'
    modImplementation "net.minecraftforge:forgeconfigapiport-fabric:4.2.11" //source: https://github.com/Fuzss/forgeconfigapiport-fabric
    implementation(include("javax.annotation:javax.annotation-api:1.3.2"))
    implementation(include("com.google.code.findbugs:jsr305:3.0.2"))
    //modImplementation "com.terraformersmc:modmenu:4.1.2"
    implementation commonProject
}

loom {
    runs {
        client {
            client()
            setConfigName("Catnip Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Catnip Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }

    accessWidenerPath = file("src/main/resources/fabric_catnip.accesswidener")
}

processResources {

    from commonProject.sourceSets.main.resources

    def buildProps = project.properties.clone()

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {

        expand buildProps
    }
}

tasks.withType(JavaCompile) {
    source(commonProject.sourceSets.main.allSource)
}

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    dev jar
}

// -- MAVEN PUBLISHING --
project.publishing {

    publications {

        mavenJava(MavenPublication) {

            artifactId project.archivesBaseName

            // Base mod archive.
            artifact(remapJar) {

                builtBy remapJar
            }

            // Adds the soruces as an artifact.
            artifact(sourcesJar) {

                builtBy remapSourcesJar
            }
        }
    }

    repositories {

        maven {

            // Sets maven credentials if they are provided. This is generally
            // only used for external/remote uploads.
            if (commonProject.hasProperty('mavenUsername') && commonProject.hasProperty('mavenPassword')) {

                credentials {

                    username findProperty('mavenUsername')
                    password findProperty('mavenPassword')
                }
            }

            url getDefaultString('mavenURL', 'undefined', true)
        }
    }
}
